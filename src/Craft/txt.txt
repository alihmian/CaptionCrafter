in my python project for manipulating images and writing on them, I need to write functions with text inputs to write on a picture.
let me tell you more about my project, there are couple of templates for creating images, a Breaking News template, a News Paper template and five more that are not designed yet, the main feature among them is that when a user wants to create an image in one of them, specifies an image and a number of lines of text depending on the template then the python code for that template  puts the image in that template with the texts.
so basically I need a library of functions for text alignment.
in graphic design, when it comes to aligning text inside a box, these are the options:
- center align  - top to button
-center align - expand from the center (the text is always at the center of the box. if the text is enough to be in one line put that line in the center of the box horizontally and vertically, if the text  goes beyond one line, shift the first line higher so the text lines also align vertically)
- center align - button to top 
- left align - top to button
-left align - expand from the center
- left align - button to top 
the same three for right align

and without box:
since there is no bound on the length of lines, there would always be one line, so just left to right or right to left

so help me organize/plan my project, with a library for text insertion functions, and python codes for each template.
the text functions should all have:
text : string,
font : you tell me maybe a path or font object from a library in puthon

if the function accepts box(left/right/top/button):
option to change the font size based on the box size so it fills the box with the larg or small enough size.
Below is a suggested plan to organize your project. You will have:

1. **A general text utility library** (e.g. `text_utils.py`) that focuses on:
   - Handling text (single-line or multi-line).
   - Handling bounding box geometry (top-to-bottom, expand from center, bottom-to-top).
   - Handling horizontal alignment (left, center, right).
   - Automatically sizing the font if desired (filling the box as large as possible).

2. **Template modules** (e.g. `breaking_news_template.py`, `newspaper_template.py`, …) each of which:
   - Defines the layout for that specific design.
   - Imports and uses the text utility functions from `text_utils.py` (or wherever the library resides).
   - Receives the user’s image(s) and text lines, then applies them to the template coordinates.

3. **A main entry point** (e.g. `generate_image.py`) that:
   - Receives user input (template choice, text strings, images).
   - Calls the appropriate template module’s function to build and save the final image.

---

## 1. Text Utility Library
This module handles text rendering, alignment, and bounding box logic. Below is a proposed structure:
### 1.1 Function: `calculate_font_size_to_fit(text, font_path, box_width, box_height, max_font_size, min_font_size, line_spacing=1.0)`
- **Purpose**: Determine the largest possible font size that makes the text (potentially multi-line) fit within the given box.
- **Inputs**:
  - `text`: The string of text (or possibly a list of lines) to measure.
  - `font_path`: Path to the TrueType/OpenType font file.
  - `box_width`, `box_height`: Dimensions of bounding box.
  - `max_font_size`, `min_font_size`: Upper/lower bounds for trial font sizes.
  - `line_spacing`: Multiplier for extra spacing between lines (1.0 means default line spacing, 1.2 is 20% extra, etc.).
- **Outputs**: 
  - A suitable `font_size` that allows the text to fit or the minimum if it never fits.


### 1.2 Function: `wrap_text_to_fit(text, font, box_width)`
- **Purpose**: Splits text into multiple lines so none exceed the box width.  
- **Inputs**:
  - `text`: The entire string to be displayed (could be multiline or single line).
  - `font`: An `ImageFont` object for measuring text.
  - `box_width`: The max line width allowed.
- **Outputs**:
  - List of lines that fit into the given width.
  

### 1.3 Function: `draw_text_in_box(draw, text, font_path, box, alignment, vertical_mode, auto_size=False, **kwargs)`
- **Purpose**: The main high-level function that draws text into a bounding box with the requested alignment and vertical expansion logic.
- **Inputs**:
  1. `draw`: An `ImageDraw` instance from Pillow (e.g., `draw = ImageDraw.Draw(image)`).
  2. `text`: The string to be drawn (could be multiline).
  3. `font_path`: Path to the font file (for dynamic font creation).
  4. `box`: A tuple `(left, top, width, height)` describing the bounding box coordinates and dimensions. 
     - Alternatively `(x1, y1, x2, y2)` can be used if you prefer top-left/bottom-right style.
  5. `alignment`: One of `('left', 'center', 'right')` for horizontal alignment.
  6. `vertical_mode`: One of `('top_to_bottom', 'center_expanded', 'bottom_to_top')`.
  7. `auto_size` (bool): If `True`, will call the font-sizing function to fill the box as large as possible without exceeding it.
  8. `kwargs`: Could include text color, line spacing, max font size, min font size, etc.


### 1.4 Function: `draw_text_no_box(draw, text, font_path, x, y, alignment='left', **kwargs)`
- **Purpose**: For text without bounding box constraints, draw a single line (or still multiline if you want) from left to right or right to left.
- **Inputs**:
  - `draw`: `ImageDraw` instance.
  - `text`: The text string.
  - `font_path`: The font path or an `ImageFont` object.
  - `x, y`: The anchor point.
  - `alignment`: `'left'` or `'right'` (center is also possible, but you probably only need left or right if it’s truly free-floating text).
  - `kwargs`: could include color, font_size, etc.
